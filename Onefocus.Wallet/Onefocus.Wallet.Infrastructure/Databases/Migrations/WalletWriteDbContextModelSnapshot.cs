// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Onefocus.Wallet.Infrastructure.Databases.DbContexts.Write;

#nullable disable

namespace Onefocus.Wallet.Infrastructure.Databases.Migrations
{
    [DbContext(typeof(WalletWriteDbContext))]
    partial class WalletWriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Bank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Counterparty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Counterparty");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Option", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OptionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("TransactedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TransactionItem");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("BankId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ClosedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal>("InterestRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("IssuedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.BankAccountTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("TransactionId");

                    b.ToTable("BankAccountTransaction");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.CashFlow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsIncome")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("CashFlow");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.CurrencyExchange", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("ExchangeRate")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CurrencyExchange");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.CurrencyExchangeTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrencyExchangeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTarget")
                        .HasColumnType("boolean");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyExchangeId");

                    b.HasIndex("TransactionId");

                    b.ToTable("CurrencyExchangeTransaction");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.PeerTransfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CounterpartyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CounterpartyId");

                    b.ToTable("PeerTransfer");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.PeerTransferTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsInFlow")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PeerTransferId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PeerTransferId");

                    b.HasIndex("TransactionId");

                    b.ToTable("PeerTransferTransaction");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UpdatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Bank", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.User", "OwnerUser")
                        .WithMany("Banks")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Counterparty", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.User", "OwnerUser")
                        .WithMany("Counterparties")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Currency", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.User", "OwnerUser")
                        .WithMany("Currencies")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Option", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.User", "OwnerUser")
                        .WithMany("Options")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Transaction", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.Currency", "Currency")
                        .WithMany("Transactions")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.User", "OwnerUser")
                        .WithMany("Transactions")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionItem", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.Transaction", "Transaction")
                        .WithMany("TransactionItems")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.BankAccount", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.Currency", "Currency")
                        .WithMany("BankAccounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.User", "OwnerUser")
                        .WithMany("BankAccounts")
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Currency");

                    b.Navigation("OwnerUser");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.BankAccountTransaction", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.BankAccount", "BankAccount")
                        .WithMany("BankAccountTransactions")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.Transaction", "Transaction")
                        .WithMany("BankAccountTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankAccount");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.CashFlow", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.Transaction", "Transaction")
                        .WithMany("CashFlows")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.CurrencyExchangeTransaction", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.CurrencyExchange", "CurrencyExchange")
                        .WithMany("CurrencyExchangeTransactions")
                        .HasForeignKey("CurrencyExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.Transaction", "Transaction")
                        .WithMany("CurrencyExchangeTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyExchange");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.PeerTransfer", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.Counterparty", "Counterparty")
                        .WithMany("PeerTransfers")
                        .HasForeignKey("CounterpartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Counterparty");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.PeerTransferTransaction", b =>
                {
                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.PeerTransfer", "PeerTransfer")
                        .WithMany("PeerTransferTransactions")
                        .HasForeignKey("PeerTransferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Onefocus.Wallet.Domain.Entities.Write.Transaction", "Transaction")
                        .WithMany("PeerTransferTransactions")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PeerTransfer");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Bank", b =>
                {
                    b.Navigation("BankAccounts");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Counterparty", b =>
                {
                    b.Navigation("PeerTransfers");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Currency", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.Transaction", b =>
                {
                    b.Navigation("BankAccountTransactions");

                    b.Navigation("CashFlows");

                    b.Navigation("CurrencyExchangeTransactions");

                    b.Navigation("PeerTransferTransactions");

                    b.Navigation("TransactionItems");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.BankAccount", b =>
                {
                    b.Navigation("BankAccountTransactions");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.CurrencyExchange", b =>
                {
                    b.Navigation("CurrencyExchangeTransactions");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.TransactionTypes.PeerTransfer", b =>
                {
                    b.Navigation("PeerTransferTransactions");
                });

            modelBuilder.Entity("Onefocus.Wallet.Domain.Entities.Write.User", b =>
                {
                    b.Navigation("BankAccounts");

                    b.Navigation("Banks");

                    b.Navigation("Counterparties");

                    b.Navigation("Currencies");

                    b.Navigation("Options");

                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
